# -*- coding: utf-8 -*-
"""Sentiment Classification RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13-4Sr7luJO9GzcS3haQJkDrhCgJ7_oeh
"""

!wget https://github.com/udacity/deep-learning/raw/master/sentiment-network/reviews.txt

!wget https://raw.githubusercontent.com/udacity/deep-learning/master/sentiment-network/labels.txt

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

import numpy as np
import tensorflow as tf

with open("reviews.txt",'r') as file:
  text = file.read()
with open("labels.txt",'r') as file:
    labels = file.read()

from string import punctuation
all_text = ''.join([c for c in text if c not in punctuation])
reviews = all_text.split('\n')

all_text = ' '.join(reviews)

words = all_text.split()

vocab_to_int = {word:index+1 for index,word in enumerate(list(set(words)))}
reviews_ints = []
for revi in reviews:
  temp = []
  for word in revi.split():
    temp.append(vocab_to_int[word])
  reviews_ints.append(temp)

labels_split = (labels.split('\n'))
labels_int = np.array([1 if label=='positive'  else 0 for label in labels_split])

from collections import Counter
review_lens = Counter([len(x) for x in reviews_ints])
print("Zero-length reviews: {}".format(review_lens[0]))
print("Maximum review length: {}".format(max(review_lens)))

non_zero_idx = [ii for ii, review in enumerate(reviews_ints) if len(review) != 0]
len(non_zero_idx)

reviews_ints = [reviews_ints[ii] for ii in non_zero_idx]
labels = np.array([labels_int[ii] for ii in non_zero_idx])

seq_len = 200
features = np.zeros([len(reviews_ints),seq_len],dtype='int')
for idx,review in enumerate(reviews_ints):
  length = len(review)
  features[idx,-length:] = np.array(review)[:seq_len]

split_frac = 0.8
from sklearn.model_selection import train_test_split

train_x,test_x,train_y,test_y = train_test_split(features,labels,train_size=split_frac)

valid_x,test_x,valid_y,test_y = train_test_split(test_x,test_y,train_size=0.5)

print("\t\t\tFeature Shapes:")
print("Train set: \t\t{}".format(train_x.shape), 
      "\nValidation set: \t{}".format(valid_x.shape),
      "\nTest set: \t\t{}".format(test_x.shape))

#Building the Graph

#First definr the hyperparameters
lstm_size = 256
lstm_layers = 2
batch_size = 500
learning_rate = 0.001

n_words = len(vocab_to_int) + 1

graph = tf.Graph()
with graph.as_default():
  inputs_  = tf.placeholder(dtype=tf.int32,shape=[None,None],name='input')
  labels_  = tf.placeholder(dtype=tf.int32,shape=[None,None],name='labels')
  keep_prob = tf.placeholder(dtype=tf.float32,name='keep_prob')

embed_size = 300

with graph.as_default():
   embedding = tf.Variable(tf.truncated_normal([n_words,embed_size]))
   embed = tf.nn.embedding_lookup(embedding,inputs_)

with graph.as_default():
    def lstm():
            lstm = tf.contrib.rnn.BasicLSTMCell(lstm_size)
            
            # Add dropout to the cell
            drop = tf.contrib.rnn.DropoutWrapper(lstm, output_keep_prob=keep_prob)
            return drop
    # Stack up multiple LSTM layers, for deep learning
    cell = tf.contrib.rnn.MultiRNNCell([lstm() for i in range(lstm_layers)])
    
    # Getting an initial state of all zeros
    initial_state = cell.zero_state(batch_size, tf.float32)

with graph.as_default():
   outputs, final_state = tf.nn.dynamic_rnn(cell, embed,
                                             initial_state=initial_state)

with graph.as_default():
      predictions = tf.contrib.layers.fully_connected(outputs[:,-1],1,activation_fn=tf.sigmoid)

      cost = tf.losses.mean_squared_error(labels_,predictions)

      optimizer = tf.train.AdamOptimizer(learning_rate).minimize(cost)

with graph.as_default():
  correct_pred = tf.equal(tf.cast(tf.round(predictions),tf.int32),labels_)
  accuracy = tf.reduce_mean(tf.cast(correct_pred,tf.float32))

def get_batches(x,y,batch_size):
  n_batches = len(x)//batch_size
  x, y = x[:n_batches*batch_size], y[:n_batches*batch_size]
  for ii in range(0, len(x), batch_size):
        yield x[ii:ii+batch_size], y[ii:ii+batch_size]

epochs = 15
with graph.as_default():
  saver = tf.train.Saver()

with tf.Session(graph=graph) as sess:
  sess.run(tf.global_variables_initializer())
  iteration=1
  for e in range(epochs):
    state= sess.run(initial_state)
    for ii,(x,y) in enumerate(get_batches(train_x,train_y,batch_size)):
      feed = {inputs_:x
              ,labels_:y[:,None],
              keep_prob:0.5,
              initial_state:state
              }

      loss,state,_ = sess.run([cost,final_state,optimizer],feed_dict=feed)
      if iteration%5==0:
                print("Epoch: {}/{}".format(e, epochs),
                      "Iteration: {}".format(iteration),
                      "Train loss: {:.3f}".format(loss))
      if iteration%25==0:
                val_acc = []
                val_state = sess.run(cell.zero_state(batch_size, tf.float32))
                for x,y in get_batches(valid_x, valid_y, batch_size):
                  feed = {inputs_: x,
                            labels_: y[:, None],
                            keep_prob: 1,
                            initial_state: val_state}
                  batch_acc, val_state = sess.run([accuracy, final_state], feed_dict=feed)
                  val_acc.append(batch_acc)
                print("Val acc: {:.3f}".format(np.mean(val_acc)))
      iteration +=1
    saver.save(sess, "checkpoints/sentiment.ckpt")

test_acc = []
with tf.Session(graph=graph) as sess:
  saver.restore(sess,tf.train.latest_checkpoint('checkpoints'))
  test_state = sess.run(cell.zero_state(batch_size,tf.float32))
  for ii, (x, y) in enumerate(get_batches(test_x, test_y, batch_size), 1):
            feed = {inputs_: x,
                      labels_: y[:, None],
                      keep_prob: 1,
                      initial_state: test_state}
            batch_acc, test_state = sess.run([accuracy, final_state], feed_dict=feed)
            test_acc.append(batch_acc)
  print("Test accuracy: {:.3f}".format(np.mean(test_acc)))

